import { ZeroWidthEntry } from './character-reader-level-1';
import { Reader } from '../reader';
import { QuantifierStack } from '../nodes/quantifier';
import { CharacterClass, CharacterClassEscape, Dot, Reference, UnicodePropertyEscape, Value } from 'regjsparser';
import { CharacterReaderValueSplitSubType } from './character-reader-level-0';
import { Groups, LookaheadStack } from '../nodes/group';
import { MyRootNode } from '../parse';
import { CharacterGroups } from '../character-groups';
import { NodeExtra } from '../node-extra';
export declare const characterReaderLevel2TypeSplit: unique symbol;
export declare const characterReaderLevel2TypeEntry: unique symbol;
export type CharacterReaderLevel2ValueSplit = Readonly<{
    reader: () => CharacterReaderLevel2;
    subType: CharacterReaderValueSplitSubType;
    type: typeof characterReaderLevel2TypeSplit;
}>;
export type BackReferenceStack = readonly Reference[];
export type CharacterReaderLevel2ValueEntry = Readonly<{
    backreferenceStack: BackReferenceStack;
    characterGroups: CharacterGroups;
    groups: Groups;
    lookaheadStack: LookaheadStack;
    node: CharacterClass | CharacterClassEscape | Dot | UnicodePropertyEscape | Value;
    preceedingZeroWidthEntries: readonly ZeroWidthEntry[];
    quantifierStack: QuantifierStack;
    type: typeof characterReaderLevel2TypeEntry;
}>;
export type CharacterReaderLevel2Value = CharacterReaderLevel2ValueEntry | CharacterReaderLevel2ValueSplit;
export type CharacterReaderLevel2ReturnValue = Readonly<{
    bounded: boolean;
    preceedingZeroWidthEntries: readonly ZeroWidthEntry[];
    type: 'end';
} | {
    type: 'abort';
}>;
export type CharacterReaderLevel2 = Reader<CharacterReaderLevel2Value, CharacterReaderLevel2ReturnValue>;
/**
 * Returns a `CharacterReaderLevel2` which builds on top of
 * `CharacterReaderLevel1` but replaces references with their
 * contents and includes the backreference stack.
 */
export declare function buildCharacterReaderLevel2({ caseInsensitive, dotAll, node, nodeExtra, }: {
    caseInsensitive: boolean;
    dotAll: boolean;
    node: MyRootNode;
    nodeExtra: NodeExtra;
}): CharacterReaderLevel2;
