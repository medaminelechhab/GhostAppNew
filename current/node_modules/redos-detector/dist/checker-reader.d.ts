import { CharacterClass, CharacterClassEscape, Dot, UnicodePropertyEscape, Value } from 'regjsparser';
import { BackReferenceStack, CharacterReaderLevel2 } from './character-reader/character-reader-level-2';
import { Reader } from './reader';
import { QuantifierStack } from './nodes/quantifier';
import { CharacterGroups } from './character-groups';
export type CheckerInput = Readonly<{
    atomicGroupOffsets: ReadonlySet<number>;
    leftStreamReader: CharacterReaderLevel2;
    maxSteps: number;
    multiLine: boolean;
    rightStreamReader: CharacterReaderLevel2;
    timeout: number;
}>;
export type CharacterGroupsOrReference = Readonly<{
    groups: CharacterGroups;
    type: 'groups';
} | {
    index: number;
    type: 'reference';
}>;
export type TrailEntrySide = Readonly<{
    backreferenceStack: BackReferenceStack;
    node: CharacterClass | CharacterClassEscape | Dot | UnicodePropertyEscape | Value;
    quantifierStack: QuantifierStack;
}>;
export type TrailEntry = Readonly<{
    intersection: CharacterGroups;
    left: TrailEntrySide;
    right: TrailEntrySide;
}>;
export type Trail = readonly TrailEntry[];
export declare const checkerReaderTypeTrail: unique symbol;
export declare const checkerReaderTypeInfiniteLoop: unique symbol;
export type CheckerReaderValueTrail = Readonly<{
    trail: Trail;
    type: typeof checkerReaderTypeTrail;
}>;
export type CheckerReaderValueInfiniteLoop = Readonly<{
    type: typeof checkerReaderTypeInfiniteLoop;
}>;
export type CheckerReaderValue = CheckerReaderValueInfiniteLoop | CheckerReaderValueTrail;
export type CheckerReader = Reader<CheckerReaderValue, CheckerReaderReturn>;
export type CheckerReaderReturn = Readonly<{
    error: 'hitMaxSteps' | 'timedOut' | null;
}>;
/**
 * Takes a left and right `CharacterReaderLevel2` and runs them against each other.
 *
 * Emits a trail when left and right differ, as it means there are 2 different ways of matching the same
 * trail up to that point.
 */
export declare function buildCheckerReader(input: CheckerInput): CheckerReader;
